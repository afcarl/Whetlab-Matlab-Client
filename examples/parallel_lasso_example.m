% Let's train up a logistic regression with an elastic net regularization
% and use whetlab to pick the best model parameters.

% First put the whetlab api client on the path
addpath(genpath('.'));

% Fill in with your whetlab access token.
accessToken = ''; % local john

load ovarian_dataset;
order = randperm(size(ovarianInputs,2)); % Grab a subset of data to make the problem harder.
X = ovarianInputs(:, order(1:50))';
Y = ovarianTargets(1,order(1:50))';

% Optimize both Lambda and Alpha using whetlab.
parameters.('Lambda') = struct('name',     'Lambda', ...
                               'type',     'float',...
                               'min',      1e-4, ...
                               'max',      0.75, ...
                               'size',     1, ...
                               'isOutput', false);

parameters.('Alpha') = struct('name',     'Alpha', ...
                              'type',     'float',...
                              'min',      1e-4, ...
                              'max',      1, ...
                              'size',     1, ...
                              'isOutput', false);
parameters.('VarA') = struct('name',     'VarA', ...
                              'type',     'float',...
                              'min',      1e-4, ...
                              'max',      1, ...
                              'size',     1, ...
                              'isOutput', false);
parameters.('VarB') = struct('name',     'VarB', ...
                              'type',     'float',...
                              'min',      1e-4, ...
                              'max',      1, ...
                              'size',     1, ...
                              'isOutput', false);
parameters.('VarC') = struct('name',     'VarC', ...
                              'type',     'float',...
                              'min',      1e-4, ...
                              'max',      1, ...
                              'size',     1, ...
                              'isOutput', false);
parameters.('VarD') = struct('name',     'VarD', ...
                              'type',     'float',...
                              'min',      1e-4, ...
                              'max',      1, ...
                              'size',     1, ...
                              'isOutput', false);
%outcome.name = 'Negative deviance';
outcome.name = 'Test Accuracy';

% Create a new experiment 
expt_name = 'Parallel E-Net Logistic Regression II';
scientist = whetlab(expt_name,...
                    'Optimizing the hyper-parameters of an elastic net in matlab',...
                    parameters, ...
                    outcome, accessToken);

% Get suggested new experiment
num_par = 5;
job = cell(num_par,1);
for ii=1:num_par
  fprintf('Requesting suggestion %d.\n', ii);
  job{ii} = scientist.suggest();
  fprintf('Suggestion received.\n');
end

for ii=1:num_par
  % Perform experiment. Perform a quick three-fold cross validation with 
  % the parameters proposed by Whetlab.
  fprintf('Running experiment %d.\n', ii);
  [B,FitInfo] = lassoglm(X, Y, 'binomial', 'Lambda', job{ii}.Lambda,...
                         'CV', 10, 'Alpha', job{ii}.Alpha);
  fprintf('Experiment complete.\n');

  % Take the negative of the returned value.
  % Whetlab will maximize negative deviance which is equivalent to minimizing deviance.
  negDeviance = -FitInfo.Deviance;

  % Now inform scientist about the outcome.
  fprintf('Reporting result %d.\n', ii);
  scientist.update(job{ii},negDeviance);
  fprintf('Result reported.\n');
end
  