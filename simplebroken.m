
% Make sure the Whetlab client is in the path.
addpath(genpath('.'));

% Fill in the whetlab access token.
accessToken = '';

parameters.('NumCentroids') = struct('name', 'NumCentroids', ...
                                     'type', 'integer', ...
                                     'min', 100, ...
                                     'max', 200, ... % 2500
                                     'size', 1, ...
                                     'isOutput', false);
parameters.('PatchWidth') = struct('name', 'PatchWidth', ...
                                   'type', 'integer', ...
                                   'min', 3, ...
                                   'max', 4, ... % 15
                                   'size', 1, ...
                                   'isOutput', false);
parameters.('PatchHeight') = struct('name', 'PatchHeight', ...
                                    'type', 'integer', ...
                                    'min', 3, ...
                                    'max', 4, ... % 15
                                    'size', 1, ...
                                    'isOutput', false);
parameters.('WhiteParam') = struct('name', 'WhiteParam', ...
                                   'type', 'float', ...
                                   'min', 1e-6, ...
                                   'max', 1e2, ...
                                   'size', 1, ...
                                   'isOutput', false);
parameters.('ExtraNoise') = struct('name', 'ExtraNoise', ...
                                   'type', 'float', ...
                                   'min', 1e-6, ...
                                   'max', 1e2, ...
                                   'size', 1, ...
                                   'isOutput', false);
parameters.('SVMC') = struct('name', 'SVMC', ...
                             'type', 'float', ...
                             'min', 1e-6, ...
                             'max', 1e6, ...
                             'size', 1, ...
                             'isOutput', false);
parameters.('KMeansIters') = struct('name', 'KMeansIters', ...
                             'type', 'integer', ...
                             'min', 1, ...
                             'max', 10, ... % 500
                             'size', 1, ...
                             'isOutput', false);

outcome.name = 'TestAccuracy';

name = 'Simple Broken';
try
  scientist = whetlab(name, ...
                      'Does this work?', ...
                      parameters, ...
                      outcome, ...
                      false,accessToken);
catch err
  err.message
  scientist = whetlab(name, ...
                      'Does this work?', ...
                      parameters, ...
                      outcome, ...
                      true,accessToken);
end
fprintf('Created scientist object.\n');

% Load in the data.
CIFAR_DIR='/home/rpa/Data/CIFAR-10/cifar-10-batches-mat/';
fprintf('Loading training data...\n');
f1=load([CIFAR_DIR '/data_batch_1.mat']);
f2=load([CIFAR_DIR '/data_batch_2.mat']);
f3=load([CIFAR_DIR '/data_batch_3.mat']);
f4=load([CIFAR_DIR '/data_batch_4.mat']);
f5=load([CIFAR_DIR '/data_batch_5.mat']);

trainX = double([f1.data; f2.data; f3.data; f4.data; f5.data]);
trainY = double([f1.labels; f2.labels; f3.labels; f4.labels; f5.labels]) ...
         + 1; % add 1 to labels!
clear f1 f2 f3 f4 f5;

job = [];
while isempty(job)
  try
    job = scientist.suggest();
  catch err
    err.message
    pause(5);
  end
end
fprintf('Got suggestion.\n');

acc = rand()*100;
pause(5);

% Now inform scientist about the outcome.
done = false;
while ~done
  try
    scientist.update(job, acc);
    done = true;
  catch err
    err.message
    pause(5);
  end
  fprintf('Successful update.\n');
end
fprintf('Experiment complete.\n');

